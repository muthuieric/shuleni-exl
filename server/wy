
class UserRegistration(Resource):
    def post(self):
        data = request.get_json()
        name = data.get('Name')
        phone = data.get('Phone')
        email = data.get('Email')
        password = data.get('Password')
        role = data.get('Role')

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        new_user = User(name=name, phone=phone, email=email, password=hashed_password, role=role)
        db.session.add(new_user)
        db.session.commit()

        return jsonify({"message": "User registered successfully"}), 201

class UserLogin(Resource):
    def post(self):
        data = request.get_json()
        email = data.get('Email')
        password = data.get('Password')
        role = data.get('Role')

        user = User.query.filter_by(email=email, role=role).first()

        if user and bcrypt.checkpw(password.encode('utf-8'), user.password):
            access_token = create_access_token(identity=user.id)
            return jsonify({'token': access_token}), 200

        return jsonify({'message': 'Invalid credentials'}), 401

class ProtectedResource(Resource):
    @jwt_required()
    def get(self):
        current_user_id = get_jwt_identity()
        return jsonify({'message': f'Protected route accessed by user {current_user_id}'}), 200

class UserLogout(Resource):
    @jwt_required()
    def get(self):
        return jsonify({"message": "Logged out successfully"}), 200
