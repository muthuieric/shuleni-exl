
class UserRegistration(Resource):
    def post(self):
        data = request.get_json()
        name = data.get('Name')
        phone = data.get('Phone')
        email = data.get('Email')
        password = data.get('Password')
        role = data.get('Role')

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        new_user = User(name=name, phone=phone, email=email, password=hashed_password, role=role)
        db.session.add(new_user)
        db.session.commit()

        return jsonify({"message": "User registered successfully"}), 201

class UserLogin(Resource):
    def post(self):
        data = request.get_json()
        email = data.get('Email')
        password = data.get('Password')
        role = data.get('Role')

        user = User.query.filter_by(email=email, role=role).first()

        if user and bcrypt.checkpw(password.encode('utf-8'), user.password):
            access_token = create_access_token(identity=user.id)
            return jsonify({'token': access_token}), 200

        return jsonify({'message': 'Invalid credentials'}), 401

class ProtectedResource(Resource):
    @jwt_required()
    def get(self):
        current_user_id = get_jwt_identity()
        return jsonify({'message': f'Protected route accessed by user {current_user_id}'}), 200

class UserLogout(Resource):
    @jwt_required()
    def get(self):
        return jsonify({"message": "Logged out successfully"}), 200


# Protect a route with JWT authentication
@app.route('/protected', methods=['GET'])
@jwt_required()
def protected_route():
    current_user_id = get_jwt_identity()
    return jsonify({'message': f'Protected route accessed by user {current_user_id}'}), 200


# logout
@app.route('/logout', methods=['GET'])
@jwt_required()
def logout():
    return jsonify({"message": "Logged out successfully"}), 200



# Create a resource for User
@app.route('/register', methods=['POST'])
def register_user():
    data = request.get_json()  # Assuming the client sends JSON data

    # Extract data from the request
    name = data.get('Name')
    phone = data.get('Phone')
    email = data.get('Email')
    password = data.get('Password')
    role = data.get('Role')
    school= data.get('School')  

    # Hash the password before storing it
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())


    # Create a new user object with the hashed password
    new_user = User(name=name, phone=phone, email=email,password=hashed_password, role=role, school=school)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201 



@app.route("/users", methods=['GET'])
def get_users():
    users = User.query.all()
    return jsonify([user.to_dict() for user in users])


@app.route("/add-users", methods=['POST'])
def create_user():
    data = request.get_json()  

    # Extract data from the request
    name = data.get('Name')
    phone = data.get('Phone')
    email = data.get('Email')
    password = data.get('Password')
    role = data.get('Role')
    school = data.get('School')  


    # Hash the password before storing it
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())


    # Create a new user object with the hashed password
    new_user = User(name=name, phone=phone, email=email,password=hashed_password, role=role, school=school)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201  

 
@app.route("/users/<int:id>", methods=['PUT'])
def update_user(id):
    data = request.get_json()
    user = User.query.get(id)

    if not user:
        return make_response(jsonify({'error': 'User not found'}), 404)

    if 'name' in data:
        user.name = data['name']
    if 'phone' in data:
        user.phone = data['phone']
    if 'email' in data:
        user.email = data['email']
    if 'role' in data:
        user.role = data['role']
    if 'school' in data:  
        user.school = data['school']

    db.session.commit()

    return make_response(jsonify({'id': user.id, 'name': user.name,'phone': user.phone, 'email': user.email, 'role': user.role, 'school': user.school}), 200)

# Route to delete an existing Student record by ID
@app.route("/users/<int:id>", methods=['DELETE'])
def delete_user(id):
    user = User.query.get(id)

    if not user:
        return make_response(jsonify({'error': 'User not found'}), 404)

    db.session.delete(user)
    db.session.commit()

    return jsonify({'message': 'User deleted successfully'})


# @app.route("/add-users", methods=['POST'])
# def create_user():
#     data = request.get_json()  # Assuming the client sends JSON data

#     # Extract data from the request
#     name = data.get('Name')
#     phone = data.get('Phone')
#     email = data.get('Email')
#     password = data.get('Password')
#     role = data.get('Role')
#     school = data.get('School')  


#     # Hash the password before storing it
#     hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())


#     # Create a new user object with the hashed password
#     new_user = User(name=name, phone=phone, email=email,password=hashed_password, role=role, school=school)
#     db.session.add(new_user)
#     db.session.commit()

#     return jsonify({"message": "User registered successfully"}), 201  


